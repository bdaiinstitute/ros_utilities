// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// See conversions.cpp.jinja template in the proto2ros.output.templates Python module.

#include "{{ package_name }}/conversions.hpp"

#include <cassert>
#include <stdexcept>
#include <sstream>
#include <utility>

#include <google/protobuf/any.h>
#include <google/protobuf/map.h>

#include <rclcpp/serialization.hpp>
#include <rclcpp/serialized_message.hpp>

#include <proto2ros/conversions.hpp>

{#-
  Expands to code for ROS to Protobuf field conversion.

  Args:
    source: identifier of the ROS message field to convert from.
    destination: identifier of the Protobuf message field to convert to.
    spec: annotated ROS message field specification.
-#}
{%- macro ros_to_proto_field_code(source, destination, spec) -%}
    {%- if not spec.type.is_primitive_type() -%}
        {%- set type_spec = known_message_specifications.get(to_ros_base_type(spec.type)) -%}
        {%- if type_spec and type_spec.annotations.get("proto-class") == "enum" -%}
            {#- Handle enum case i.e. extract integral values from ROS wrapper messages. -#}
            {%- if spec.type.is_array -%}
{{ destination }}->Reserve(static_cast<int>({{ source }}.size()));
for (const auto& item : {{ source }}) {
    {{ destination }}->Add(static_cast<{{ type_spec.annotations["proto-type"] | as_pb2_cpp_type }}>(item.value));
}
            {%- else -%}
{{ destination | rreplace("mutable", "set", 1) | rreplace("()", "", 1) }}(
   static_cast<{{ type_spec.annotations["proto-type"] | as_pb2_cpp_type }}>({{ source }}.value));
            {%- endif -%}
        {%- elif spec.type.is_array -%}
            {%- set input_item = itemize_cpp_identifier(source, "input_") -%}
            {%- set output_item = itemize_cpp_identifier(destination, "output_") -%}
            {%- if type_spec and type_spec.annotations.get("map-entry") -%}{#- Handle map case. -#}
{{ destination }}->clear();
for (const auto& {{ input_item }} : {{ source }}) {
    auto* {{ output_item }} = &(*{{ destination }})[{{ input_item }}.key];
    {% for field_spec in type_spec.fields if field_spec.name == "value" %}
        {%- if not field_spec.type.is_primitive_type() -%}
            {%- set field_type_spec = known_message_specifications.get(to_ros_base_type(field_spec.type)) -%}
            {%- if field_type_spec and field_type_spec.annotations.get("proto-class") == "enum" -%}
    *{{ output_item }} = static_cast<{{ field_type_spec.annotations["proto-type"] | as_pb2_cpp_type }}>({{ input_item }}.value.value);
            {%- else -%}{#- Handle message case. -#}
    {{ ros_to_proto_composite_field_code_block(input_item + ".value", output_item, field_spec) | indent(4) }}
            {%- endif -%}
        {%- elif field_spec.annotations["proto-type"] == "bytes" -%}
            {#- Handle bytes case. -#}
    {{ output_item }}->clear();
    {{ output_item }}->reserve({{ input_item }}.value.size());
    {{ output_item }}->assign({{ input_item }}.value.begin(), {{ input_item }}.value.end());
       {%- else -%}{#- Handle primitive types case. -#}
    *{{ output_item }} = {{ input_item }}.value;
       {%- endif -%}
    {%- endfor %}
}
            {%- else -%}{#- Handle sequence case i.e. just convert sequence items. -#}
{{ destination }}->Clear();
{{ destination }}->Reserve(static_cast<int>({{ source }}.size()));
for (const auto& {{ input_item }} : {{ source }}) {
    auto* {{ output_item }} = {{ destination }}->Add();
    {{ ros_to_proto_composite_field_code_block(input_item, output_item, spec) | indent(4) }}
}
            {%- endif -%}
        {%- else -%}{#- Handle message case. -#}
{{ ros_to_proto_composite_field_code_block(source, destination, spec) }}
        {%- endif -%}
    {%- elif spec.annotations["proto-type"] == "bytes" -%}
        {#- Handle bytes case. -#}
        {%- if to_ros_base_type(spec.type) == "proto2ros/Bytes" -%}
{{ destination }}->Clear();
{{ destination }}->Reserve(static_cast<int>({{ source }}.size()));
for (const auto& blob : {{ source }}) {
    auto* value = {{ destination }}->Add();
    value->reserve(blob.data.size());
    value->assign(blob.data.begin(), blob.data.end());
}
        {%- else -%}
{{ destination }}->clear();
{{ destination }}->reserve({{ source }}.size());
{{ destination }}->assign({{ source }}.begin(), {{ source }}.end());
        {%- endif -%}
    {%- else -%}{#- Handle primitive types case. -#}
        {%- if spec.type.is_array -%}
{{ destination }}->Clear();
{{ destination }}->Reserve(static_cast<int>({{ source }}.size()));
for (auto item : {{ source }}) {
    {{ destination }}->Add(std::move(item));  // NOLINT(performance-move-const-arg)
}
        {%- else -%}
{{ destination | rreplace("mutable", "set", 1) | rreplace("()", "", 1) }}({{ source }});
        {%- endif -%}
    {%- endif -%}
{%- endmacro -%}

{#-
  Expands to a code block for ROS to Protobuf composite field conversion.

  Args:
    source: identifier for the ROS message field to convert from.
    destination: identifier for the Protobuf message field to convert to.
    spec: annotated ROS message field specification.

  Note: code block may expand within a for-loop, during a repeated field expansion.
-#}
{%- macro ros_to_proto_composite_field_code_block(source, destination, spec) -%}
    {%- set type_spec = known_message_specifications.get(to_ros_base_type(spec.type)) -%}
    {%- if spec.annotations.get("type-erased") -%}{#- ROS message must be deserialized for conversion. -#}
{
    if ({{ source }}.type_name != "{{ spec.type | as_ros_base_type }}") {
       std::ostringstream message{"expected {{ spec.type | as_ros_base_type }} message for {{ spec.name }} member"};
       message << ", got " << {{ source }}.type_name;
       throw std::runtime_error(message.str());
    }
    rclcpp::SerializedMessage serialized_message;
    serialized_message.reserve({{ source }}.value.size());
    auto& rcl_serialized_message = serialized_message.get_rcl_serialized_message();
    std::copy({{ source }}.value.begin(), {{ source }}.value.end(), rcl_serialized_message.buffer);
    rcl_serialized_message.buffer_length = {{ source }}.value.size();
    const auto serializer = rclcpp::Serialization<{{ spec.type | as_ros_base_type | as_ros_cpp_type }}>{};
    auto typed_ros_message = {{ spec.type | as_ros_base_type | as_ros_cpp_type }}();
    serializer.deserialize_message(&serialized_message, &typed_ros_message);
    Convert(typed_ros_message, {{ destination }});
}
    {%- elif spec.annotations.get("type-casted") -%}
        {#- ROS message must be converted and packed for assignment. -#}
{
    auto typed_proto_message = {{ spec.annotations["proto-type"] | as_pb2_cpp_type }}();
    Convert({{ source }}, &typed_proto_message);
    {{ destination }}->PackFrom(typed_proto_message);
}
    {%- elif spec.annotations.get("type-casts") -%}
        {#- ROS message must be deserialized according to type, then converted, then packed for assignment. -#}
        {% for proto_type_name, ros_type_name in spec.annotations["type-casts"] -%}
            {%- if loop.first -%}
if ({{ source }}.type_name == "{{ ros_type_name }}") {
            {%- else %}
} else if ({{ source }}.type_name == "{{ ros_type_name }}") {
            {%- endif %}
    rclcpp::SerializedMessage serialized_message;
    serialized_message.reserve({{ source }}.value.size());
    auto& rcl_serialized_message = serialized_message.get_rcl_serialized_message();
    std::copy({{ source }}.value.begin(), {{ source }}.value.end(), rcl_serialized_message.buffer);
    rcl_serialized_message.buffer_length = {{ source }}.value.size();
    const auto serializer = rclcpp::Serialization<{{ ros_type_name | as_ros_cpp_type }}>{};
    auto typed_ros_message = {{ ros_type_name | as_ros_cpp_type }}();
    serializer.deserialize_message(&serialized_message, &typed_ros_message);
    auto typed_proto_message = {{ proto_type_name | as_pb2_cpp_type }}();
    Convert(typed_ros_message, &typed_proto_message);
    {{ destination }}->PackFrom(typed_proto_message);
       {%- endfor %}
} else {
    std::ostringstream message;
    message << "unexpected " << {{ source }}.type_name << " in {{ spec.name }} member";
    throw std::runtime_error(message.str());
}
    {%- elif type_spec and type_spec.annotations.get("tagged") -%}
        {#- Handle one-of field case i.e. determine and convert the ROS message member that is set. -#}
        {%- set tag_field_spec = type_spec.annotations["tag"] -%}
switch ({{ source }}.{{ tag_field_spec.name }} != 0 ? {{ source }}.{{ tag_field_spec.name }} : {{ source }}.{{ tag_field_spec.annotations["alias"] }}) {
        {%- for tag_spec, member_spec in type_spec.annotations["tagged"] -%}
            {%- set source_member = source + "." + member_spec.name -%}
            {%- set destination_member = destination.rpartition("->")[0] + "->mutable_" + to_pb2_cpp_name(member_spec.annotations.get("proto-cpp-name", member_spec.name)) + "()" %}
    case {{ type_spec.base_type | string | as_ros_cpp_type }}::{{ tag_spec.name }}:
        {{ ros_to_proto_field_code(source_member, destination_member, member_spec) | indent(8) }}
        break;
        {%- endfor %}
    default:
        break;
}
    {%- else -%}{#- Handle the generic ROS message case (because it is appropriate or because we do not know any better). -#}
Convert({{ source }}, {{ destination }});
    {%- endif -%}
{%- endmacro -%}

{#-
  Expands to code for Protobuf to ROS field conversion.

  Args:
    source: identifier of the Protobuf message field to convert from.
    destination: identifier of the ROS message field to convert to.
    spec: annotated ROS message field specification.
-#}
{%- macro proto_to_ros_field_code(source, destination, spec) -%}
    {%- if not spec.type.is_primitive_type() -%}
        {%- set type_spec = known_message_specifications.get(to_ros_base_type(spec.type)) %}
        {%- if type_spec and type_spec.annotations.get("proto-class") == "enum" -%}
            {#- Handle enum case i.e. wrap integral values in ROS messages. -#}
            {%- if spec.type.is_array -%}
{{ destination }}.clear();
{{ destination }}.reserve({{ source }}.size());
for (const auto& value : {{ source }}) {
    auto& mutable_enum_message = {{ destination }}.emplace_back();
    mutable_enum_message.value = static_cast<int>(value);
}
            {%- else -%}
{{ destination }}.value = static_cast<int>({{ source }});
            {%- endif -%}
        {%- elif spec.type.is_array -%}
            {%- set input_item = itemize_cpp_identifier(source, "input_") -%}
            {%- set output_item = itemize_cpp_identifier(destination, "output_") -%}
            {%- if type_spec and type_spec.annotations.get("map-entry") -%}
                {#- Handle map case i.e. reconstruct map entries, the convert, then assign. -#}
for (const auto& {{ input_item }} : {{ source }}) {
    auto& {{ output_item }} = {{ destination }}.emplace_back();
    {{ output_item }}.key = {{ input_item }}.first;
    {%- for field_spec in type_spec.fields if field_spec.name == "value" %}
    {{ proto_to_ros_field_code(input_item + ".second", output_item + ".value", field_spec) | indent(4) }}
    {%- endfor %}
}
            {%- else -%}
                {#- Handle sequence case. -#}
for (const auto& {{ input_item }} : {{ source }}) {
    auto &{{ output_item }} = {{ destination }}.emplace_back();
    {{ proto_to_ros_composite_field_code_block(input_item, output_item, spec) | indent(4) }}
}
            {%- endif %}
        {%- else -%}{#- Handle message case. -#}
{{ proto_to_ros_composite_field_code_block(source, destination, spec) }}
        {%- endif -%}
    {%- elif spec.annotations["proto-type"] == "bytes" %}
        {#- Handle bytes case. -#}
        {%- if to_ros_base_type(spec.type) == "proto2ros/Bytes" -%}
{{ destination }}.clear();
{{ destination }}.reserve({{ source }}.size());
for (const auto& blob : {{ source }}) {
    auto& mutable_message = {{ destination }}.emplace_back();
    mutable_message.data.assign(blob.begin(), blob.end());
}
        {%- else -%}
{{ destination }}.clear();
{{ destination }}.reserve({{ source }}.size());
{{ destination }}.assign({{ source }}.begin(), {{ source }}.end());
        {%- endif -%}
    {%- else -%}{#- Handle primitive types case. -#}
        {%- if spec.type.is_array -%}
{{ destination }}.clear();
{{ destination }}.reserve({{ source }}.size());
{{ destination }}.assign({{ source }}.begin(), {{ source }}.end());
        {%- else -%}
{{ destination }} = {{ source }};
        {%- endif -%}
    {%- endif -%}
{%- endmacro -%}

{#-
  Expands to a code block for Protobuf to ROS composite field conversion.

  Args:
    source: identifier of the Protobuf message field to convert from.
    destination: identifier of the ROS message field to convert to.
    spec: annotated ROS message field specification.

  Note: code block may expand within a for-loop, during a repeated field expansion.
-#}
{%- macro proto_to_ros_composite_field_code_block(source, destination, spec) -%}
    {%- set type_spec = known_message_specifications.get(to_ros_base_type(spec.type)) -%}
    {%- if spec.annotations.get("type-erased") -%}{#- ROS message must be serialized for assignment. -#}
{
    auto typed_ros_message = {{ spec.type | as_ros_base_type | as_ros_cpp_type }}();
    Convert({{ source }}, &typed_ros_message);
    const auto serde = rclcpp::Serialization<{{ spec.type | as_ros_base_type | as_ros_cpp_type }}>{};
    rclcpp::SerializedMessage serialized_message;
    serde.serialize_message(&typed_ros_message, &serialized_message);
    const auto& rcl_serialized_message = serialized_message.get_rcl_serialized_message();
    const auto* begin = rcl_serialized_message.buffer;
    const auto* end = begin + rcl_serialized_message.buffer_length;
    {{ destination }}.value.assign(begin, end);
    {{ destination }}.type_name = "{{ spec.type | as_ros_base_type }}";
}
    {%- elif spec.annotations.get("type-casted") -%}
        {#- Protobuf message must be unpacked for conversion. -#}
{
    auto typed_message = {{ spec.annotations["proto-type"] | as_pb2_cpp_type }}();
    if (!{{ source }}.UnpackTo(&typed_message)) {
        throw std::runtime_error("Failed to unpack protobuf, internal error");
    }
    Convert(typed_message, &{{ destination }});
}
    {%- elif spec.annotations.get("type-casts") -%}
        {#- Protobuf message must be unpacked according to type, then converted, then serialized for assignment. -#}
{
        {%- for proto_type_name, ros_type_name in spec.annotations["type-casts"] -%}
            {%- if loop.first %}
    if ({{ source }}.Is<{{ proto_type_name | as_pb2_cpp_type }}>()) {
            {%- else %}
    } else if ({{ source }}.Is<{{ proto_type_name | as_pb2_cpp_type }}>()) {
            {%- endif %}
        auto typed_protobuf_message = {{ proto_type_name | as_pb2_cpp_type }}();
        if (!{{ source }}.UnpackTo(&typed_protobuf_message)) {
           throw std::runtime_error("Failed to unpack any protobuf, internal error");
        }
        auto typed_ros_message = {{ ros_type_name | as_ros_cpp_type }}();
        Convert(typed_protobuf_message, &typed_ros_message);
        const auto serializer = rclcpp::Serialization<{{ ros_type_name | as_ros_cpp_type }}>{};
        rclcpp::SerializedMessage serialized_message;
        serializer.serialize_message(&typed_ros_message, &serialized_message);
        const auto& rcl_serialized_message = serialized_message.get_rcl_serialized_message();
        const auto* begin = rcl_serialized_message.buffer;
        const auto* end = begin + rcl_serialized_message.buffer_length;
        {{ destination }}.value.assign(begin, end);
        {{ destination }}.type_name = "{{ ros_type_name }}";
        {%- endfor %}
    } else {
        std::ostringstream message{"unknown protobuf message type in {{ spec.name }} member"};
        message << ": " << {{ source }}.type_url();
        throw std::runtime_error(message.str());
    }
}
    {%- elif type_spec and type_spec.annotations.get("tagged") -%}
        {#- Handle one-of field case i.e. determine and convert the Protobuf message member that is set. -#}
        {%- set source_parent = source.rpartition(".")[0] -%}
        {%- set source_case = rreplace(source, "()", "_case()", 1) -%}{#- adds case suffix to the last getter. -#}
        {%- set tag_field_spec = type_spec.annotations["tag"] -%}
switch ({{ source_case }}) {
        {%- for tag_spec, member_spec in type_spec.annotations["tagged"] %}
            {%- set parent_type_spec = type_spec.annotations["parent-spec"] -%}
            {%- set source_member = source_parent + "." + to_pb2_cpp_name(member_spec.annotations.get("proto-cpp-name", member_spec.name)) + "()" -%}
            {%- set destination_member = destination + "." + member_spec.name %}
    case {{ parent_type_spec.annotations["proto-type"] | as_pb2_cpp_type }}::{{ member_spec.annotations.get("proto-cpp-name", member_spec.name) | to_hungarian_notation }}:
        {{ proto_to_ros_field_code(source_member, destination_member, member_spec) | indent(8) }}
        {{ destination }}.{{ tag_field_spec.name }} = {{ type_spec.base_type | string | as_ros_cpp_type }}::{{ tag_spec.name }};
        {{ destination }}.{{ tag_field_spec.annotations["alias"] }} = {{ destination }}.{{ tag_field_spec.name }};
        break;
        {%- endfor %}
    default:
        {{ destination }}.{{ tag_field_spec.name }} = 0;
        {{ destination }}.{{ tag_field_spec.annotations["alias"] }} = 0;
        break;
}
    {%- else -%}{#- Handle the generic Protobuf message case (because it is appropriate or because we do not know any better). -#}
Convert({{ source }}, &{{ destination }});
    {%- endif -%}
{%- endmacro %}

namespace {{ package_name }}::conversions {

using proto2ros::conversions::Convert;
{%- for namespace in config.inline_cpp_namespaces %}
using {{ namespace }}::Convert;
{%- endfor %}

{% for spec in message_specifications if spec.annotations.get("proto-class") == "message" and not spec.annotations.get("map-entry") -%}
void Convert(const {{ spec.base_type | string | as_ros_cpp_type }}& ros_msg, {{ spec.annotations["proto-type"] | as_pb2_cpp_type }}* proto_msg) {
    assert(proto_msg != nullptr);
    {%- if spec.fields %}
    proto_msg->Clear();
        {%- for field_spec in spec.fields if field_spec.name != "has_field" %}
            {%- set source = "ros_msg." + field_spec.name -%}
            {%- set destination = "proto_msg->mutable_" + to_pb2_cpp_name(field_spec.annotations.get("proto-cpp-name", field_spec.name)) + "()" -%}
            {%- if field_spec.annotations["optional"] %}{#- Check for field presence before use. #}
    if ((ros_msg.has_field & {{ spec.base_type | string | as_ros_cpp_type }}::{{ field_spec.name | upper }}_FIELD_SET) != 0) {
        {{ ros_to_proto_field_code(source, destination, field_spec) | indent(8) }}
    }
            {%- else %}
    {{ ros_to_proto_field_code(source, destination, field_spec) | indent(4) }}
            {%- endif -%}
        {%- endfor -%}
    {% else -%}{#- Handle empty message. #}
    std::ignore = ros_msg;
    std::ignore = proto_msg;
    {%- endif %}
}

void Convert(const {{ spec.annotations["proto-type"] | as_pb2_cpp_type }}& proto_msg, {{ spec.base_type | string | as_ros_cpp_type }}* ros_msg) {
    assert(ros_msg != nullptr);
    {%- if spec.fields -%}
        {%- if spec.annotations["has-optionals"] %}
    ros_msg->has_field = 0U;
        {%- endif -%}
        {%- for field_spec in spec.fields if field_spec.name != "has_field" -%}
           {%- set source = "proto_msg." + to_pb2_cpp_name(field_spec.annotations.get("proto-cpp-name", field_spec.name)) + "()" -%}
           {%- set destination = "ros_msg->" + field_spec.name -%}
           {%- if field_spec.annotations["optional"] -%}{#- Check for field presence before use. #}
    if (proto_msg.has_{{ field_spec.annotations.get("proto-cpp-name", field_spec.name) | as_pb2_cpp_name }}()) {
        {{ proto_to_ros_field_code(source, destination, field_spec) | indent(8) }}
        ros_msg->has_field |= {{ spec.base_type | string | as_ros_cpp_type }}::{{ field_spec.name | upper }}_FIELD_SET;
    }
            {%- else %}
    {{ proto_to_ros_field_code(source, destination, field_spec) | indent(4) }}
            {%- endif -%}
        {%- endfor -%}
    {% else -%}{#- Handle empty message. #}
    std::ignore = proto_msg;
    std::ignore = ros_msg;
    {%- endif %}
}

{% endfor -%}
}  // namespace {{ package_name }}::conversions
