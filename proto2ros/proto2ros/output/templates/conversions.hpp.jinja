// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// See conversions.hpp.jinja template in the proto2ros.output.templates Python module.

#pragma once
{% for header in config.cpp_headers|sort %}
#include <{{ header }}>
{%- endfor %}

namespace {{ package_name }}::conversions {
{% for spec in message_specifications if spec.annotations.get("proto-class") == "message" and not spec.annotations.get("map-entry") %}
/// Convert from {{ spec.annotations["proto-type"] }} Protobuf messages to {{ spec.base_type }} ROS messages.
void Convert(const {{ spec.annotations["proto-type"] | as_pb2_cpp_type }}& proto_msg, {{ spec.base_type | string | as_ros_cpp_type }}* ros_msg);

/// Convert from {{ spec.base_type }} ROS messages to {{ spec.annotations["proto-type"] }} Protobuf messages.
void Convert(const {{ spec.base_type | string | as_ros_cpp_type }}& ros_msg, {{ spec.annotations["proto-type"] | as_pb2_cpp_type }}* proto_msg);

/// Convert from {{ spec.annotations["proto-type"] }} Protobuf messages to {{ spec.base_type }} ROS messages.
inline {{ spec.base_type | string | as_ros_cpp_type }} Convert(const {{ spec.annotations["proto-type"] | as_pb2_cpp_type }}& proto_msg) {
    auto ros_msg = {{ spec.base_type | string | as_ros_cpp_type }}();
    Convert(proto_msg, &ros_msg);
    return ros_msg;
}

/// Convert from {{ spec.base_type }} ROS messages to {{ spec.annotations["proto-type"] }} Protobuf messages.
inline {{ spec.annotations["proto-type"] | as_pb2_cpp_type }} Convert(const {{ spec.base_type | string | as_ros_cpp_type }}& ros_msg) {
    auto proto_msg = {{ spec.annotations["proto-type"] | as_pb2_cpp_type }}();
    Convert(ros_msg, &proto_msg);
    return proto_msg;
}
{% endfor %}
}  // namespace {{ package_name }}::conversions
